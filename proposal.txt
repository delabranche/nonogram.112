Farid Khuri-Makdisi
andrewid: fkhurima

(this document has been updated since my TP2 submission, the TP3 section has been added)

TP3:

#################
TP3 Update:
#################

I have implemented a variant of nonograms that I came up with called "nonorikabe". The rules are different, and I wrote an interesting algorithm that uses backtracking to count the number of "space islands". I also modified some generation attributes.
I also worked on final design changes, fixed bugs and improved the user interface to make it as smooth as I can.

TP2:

#################
Updated Project Plan:
#################

So far, I've implemented both random generators and both editors as well as the help screen.

This has not changed from my initial proposal except for the fact that I decided against creating nonograms by inputting clues manually. I think it's a superfluous feature that adds nothing to the app.

I've finally fixed my uniqueness checker! I am now very confident in the uniqueness of the puzzles I generate. However, finding solutions is very difficult for large boards (it's an NP-Hard problem). So if the user edits a large board, I can only guarantee uniqueness once they fill a certain number of cells. 

Of the two remaining features on my list, "nonorikabe" seems more interesting. It's a variant of the game that I created and I am currently implementing it. 

TP1 Proposal:

################
Project Description:
################

''nonogram.112" is an app that lets you play random nonograms, create custom nonograms (b/w or colors), and play a nonogram variant I created. Nonograms are grid-based logic puzzles.

##############
Structural Plan:
##############

A splash screen will take you to any gamemode or a tutorial. 

Gamemodes:

-Play random generated nonograms (b/w or color):
 
Generate correct solution list -> display empty board (similarly, only need to generate rows, but display row, col indicators - done recursively).
Separately store input -> display input regardless and compare to list when submit is pressed.
Store time, best time, vary size...

-Editor:

For a given input drawn over a blank grid, display the numbers on the edges. Give a color palette to make color nonograms generators. Or, input numbers.

-Variant:

Similar to normal, but with 1/2 the clues and certain numbered cells in the grid.

###############
Algorithmic Plan:
###############

-Generation: Use 2D lists to keep track of the unique solution grid (complex, solving unique nonograms to check they're valid is NP-hard - recursively check for uniqueness). Use random.py to generate boards with different parameters so that the solution grids are fun to solve (also tricky). Also keep track of user input etc...

-Editor:

If numbers are inputted, check for uniqueness using recursion/backtracking. Difficult, but goes hand in hand with generation function.

-Variant:

This is a harder logic puzzle I've created, and it will require things like a recursive counting function to find the size of each "island of spaces". 

#################
Version Control Plan:
#################

Periodically store files in google drive (see image), and keep track of edits.